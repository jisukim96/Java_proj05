package chapter12.ex01;

// 추상 메소드를 구현하는 방법 2가지
	// 1. 자식클래스에서 구현한 클래스를 생성하고 출력 : 매번 자주 사용해야하는 경우
		// 출력 코드가 간결함. 구현한 클래스를 생성해야 한다.
	// 2. 익명 클래스를 생성해서 출력하는 방법 : 한번 사용하고 버릴 경우, 안드로이드 폰 개발할 때, 이벤트 처리할 때 사용
			//추상클래스의 구현한 자식 클래스 생성없이 바로 사용이 가능.
			//여러번 사용할 때는 구현한 코드를 매번 생성해야 한다.


// 1. 첫번째 방법 : 추상클래스(A) <== 구현한 클래스(B)만들고 출력
abstract class A {			// 추상 클래스
	abstract void cry();	// 실행구 없음
}

// 2. 두번째 방법 : 추상 클래스를 구현한 클래스 없이 바로 출력 : 익명 클래스를 사용해서 출력
abstract class C{
	abstract void run();
}

//추상 메소드를 구현하는 클래스를 생성 : <<

class B extends A{		// 1. 자식 클래스에서 추상 클래스에 있는 메소드를 구현한 클래스를 생성
	@Override
	void cry() {
		System.out.println("모든 동물은 웁니다.(자식 클래스에서 추상 메소드를 완성함)");
	}
}

public class Abstract_Class02 {

	public static void main(String[] args) {
		
		// 추상 클래스는 객체화 할 수 없다. 타입으로 지정은 가능하다.
//		A a = new A();		 추상 클래스 : 객체생성 불가능
		
		// 첫번째 방법 : 추상클래스 A를 구현할 클래스 B 생성 후 출력		
		A a1 = new B();
		a1.cry();
		
		A a2 = new B();
		a2.cry();
		
//		 두번째 방법 : 구현한 클래스없이 바로 출력 ( 익명 클래스 사용 ) C는 추상클래스이므로 객체화 불가능
//			익명 클래스 : 
//		 추상클래스 C 에 구현되지 않는 메소드를 구현함
		
		C c1 = new C() {
			//C 추상클래스의 오버라이딩해서 메소드 구현
			@Override
			void run() {
				System.out.println("미완성 ==> 완성");
			}
		};
		c1.run();//C 클래스에는 자식객체없음. 오버라이딩한 메소드 호출
		
		//추상메소드 오버라이딩
		C c2 = new C() {
			@Override
			void run() {
				System.out.println("미완성 2 ==> 완성 2");
			}
		};
		
		c2.run();
	}

}
